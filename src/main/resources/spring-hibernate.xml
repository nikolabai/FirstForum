<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=
		"http://www.springmodules.org/schema/cache/springmodules-cache.xsd 
		http://www.springmodules.org/schema/cache/springmodules-ehcache.xsd
		http://www.springframework.org/schema/beans
		 http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context
		 http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- *********************************************************************************** -->
	<!-- 1.配置自动扫描的包 -->
	<!-- 扫描dao包下@repository的组件 -->
	<context:component-scan base-package="cn.gavin.dao"></context:component-scan>
	<!-- 扫描cn.gavin.service包下所有标注@service的服务组件 -->
	<context:component-scan base-package="cn.gavin.service"></context:component-scan>
	
	<!-- ************************************数据源配置*********************************************** -->
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc_driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>
	
	<!-- ************************************配置hibernate session工厂 *********************************************** -->
	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--1.指定Hibernate的属性信息-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 使用EHcache缓存实现方案 -->
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<!-- 启用hibernate二级缓存 -->
				<prop key="cache.use_second_level_cache">true</prop>
				<!-- 启动"查询缓存"如果想缓存使用findall()、list()、Iterator()、createCriteria()、createQuery()等方法获得的数据结果集,必须配置此项-->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- 配置二级缓存实现类-->
				<!-- <prop key="hibernate.cache.region.factory_class">true</prop> -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
			</props>
		</property>
		<!-- 2.配置 hibernate 映射文件的位置及名称, 可以使用通配符 -->
		<property name="mappingLocations" 
				value="classpath:cn/gavin/domain/*.hbm.xml"></property>

		<!--3.自动扫描注解方式配置的hibernate类文件(扫描基于JPA注解PO类目录 -->
		<property name="packagesToScan">
			<list>
				<value>cn.gavin.domain</value>
			</list>
		</property> 
	</bean>
	<!-- ************************************二级缓存********************************************** -->
	<!-- 基于EHcache的系统缓存管理器 -->
	<bean id ="cacheManager"
		  class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		  p:configLocation="classpath:ehcache.xml"/>
		  
	<!-- ************************************事务********************************************** -->	  
	<!-- 1.事务管理器 -->
	<bean id="transactionManager"
			class="org.springframework.orm.hibernate5.HibernateTransactionManager"
			p:sessionFactory-ref="sessionFactory"/>
	<!-- 3.使用更强大的切点表达式语言轻松定义目标方法 -->
	
	<!-- 注解方式配置事物 -->
	 <tx:annotation-driven transaction-manager="transactionManager" />  
	
	<!-- 拦截器方式配置事物    ；  配置事务属性, 需要事务管理器 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" />
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="edit*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="repair" />
			<tx:method name="deleteAndRepair" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 使用强大的切点表达式语言轻松定义目标方法 ；配置事务切点, 并把切点和事务属性关联起来-->
	<aop:config>
		<!-- 通过AOP定义事物增强切面 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.gavin.service.*.*(..))" />
		<!-- 引用事物增强 -->
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
</beans>
